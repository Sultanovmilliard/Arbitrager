import requests

def get_bybit_price(amount: int, trade_type: str):
    url = "https://api2.bybit.com/fiat/otc/item/online"
    params = {
        "userId": "",
        "tokenId": "USDT",
        "currencyId": "RUB",
        "payment": "",
        "side": 1 if trade_type == "SELL" else 0,
        "size": str(amount),
        "page": 1,
        "rows": 10
    }
    headers = {
        "Content-Type": "application/json",
        "Origin": "https://www.bybit.com"
    }

    try:
        response = requests.get(url, params=params, headers=headers, timeout=10)
        if response.status_code != 200:
            return None, f"[BYBIT STATUS] {response.status_code}"

        data = response.json().get("result", {}).get("items", [])
        if not data:
            return None, "[BYBIT] –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
        return float(data[0]["price"]), None
    except Exception as e:
        return None, f"[BYBIT ERROR] {e}"

def find_arbitrage(amount):
    buy_price, buy_error = get_bybit_price(amount, "BUY")
    sell_price, sell_error = get_bybit_price(amount, "SELL")

    if buy_error or sell_error:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."

    spread = (sell_price - buy_price) / buy_price * 100
    if spread >= 3:
        return (
            f"üîç –ê—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞–π–¥–µ–Ω!\n"
            f"–ö—É–ø–∏—Ç—å –ø–æ: {buy_price:.2f} ‚ÇΩ\n"
            f"–ü—Ä–æ–¥–∞—Ç—å –ø–æ: {sell_price:.2f} ‚ÇΩ\n"
            f"üìä –ü—Ä–æ—Ñ–∏—Ç: {spread:.2f}%"
        )
    return f"–°–ø—Ä–µ–¥: {spread:.2f}% ‚Äî –Ω–∏–∂–µ 3%, –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–µ–≤—ã–≥–æ–¥–µ–Ω."
