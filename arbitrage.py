import aiohttp

BYBIT_P2P_API = "https://api.bybit.com/spot/v1/p2p/order-list"

async def fetch_bybit_p2p_orders(side: str, amount_rub: int, pay_types="Tinkoff", page=1, rows=50):
    params = {
        "side": side,               # "sell" ‚Äî –ø—Ä–æ–¥–∞—é—Ç USDT (—á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å USDT), "buy" ‚Äî –ø–æ–∫—É–ø–∞—é—Ç USDT (—á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å USDT)
        "payment_method": pay_types,
        "asset": "USDT",
        "fiat": "RUB",
        "page": page,
        "rows": rows,
        "amount": amount_rub
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(BYBIT_P2P_API, params=params) as resp:
            data = await resp.json()
            if data.get("retCode") != 0:
                return []
            return data["result"]["data"]

async def check_arbitrage(bot, user_id, amount_rub, spread_threshold_percent):
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ (–ø—Ä–æ–¥–∞—é—Ç USDT, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ä—É–±–ª–∏)
    sellers = await fetch_bybit_p2p_orders(side="sell", amount_rub=amount_rub)
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–ø–æ–∫—É–ø–∞—é—Ç USDT, —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å —Ä—É–±–ª–∏)
    buyers = await fetch_bybit_p2p_orders(side="buy", amount_rub=amount_rub)

    if not sellers or not buyers:
        await bot.send_message(user_id, "–û–±—ä—è–≤–ª–µ–Ω–∏—è —Å ByBit P2P –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    profitable_offers = []

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–∞—Ä—ã –ø—Ä–æ–¥–∞–≤–µ—Ü-–ø–æ–∫—É–ø–∞—Ç–µ–ª—å
    for s_offer in sellers:
        s_adv = s_offer["advertisement"]
        s_price = float(s_adv["price"])
        s_nick = s_adv["advertiserNickName"]
        s_url = f"https://t.me/{s_nick}"

        for b_offer in buyers:
            b_adv = b_offer["advertisement"]
            b_price = float(b_adv["price"])
            b_nick = b_adv["advertiserNickName"]
            b_url = f"https://t.me/{b_nick}"

            # –°–ø—Ä–µ–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            if b_price <= s_price:
                continue  # –ù–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –ø–ª–∞—Ç–∏—Ç –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–æ—Å–∏—Ç

            spread = ((b_price - s_price) / s_price) * 100
            profit_rub = (b_price - s_price) * amount_rub

            if spread >= spread_threshold_percent:
                profitable_offers.append({
                    "seller_nick": s_nick,
                    "seller_url": s_url,
                    "buyer_nick": b_nick,
                    "buyer_url": b_url,
                    "price_sell": s_price,
                    "price_buy": b_price,
                    "spread": spread,
                    "profit_rub": profit_rub
                })

    if not profitable_offers:
        await bot.send_message(user_id, f"–ê—Ä–±–∏—Ç—Ä–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Å—É–º–º–µ {amount_rub:,} ‚ÇΩ –∏ –ø–æ—Ä–æ–≥—É {spread_threshold_percent}%.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –≤—Å–µ—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    msg = f"üìä –ê—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞–π–¥–µ–Ω –ø–æ —É—Å–ª–æ–≤–∏—è–º ({amount_rub:,} ‚ÇΩ)\n\n"

    for offer in profitable_offers:
        msg += (
            f"üë§ [–ü—Ä–æ–¥–∞–≤–µ—Ü]({offer['seller_url']})     üßë [–ü–æ–∫—É–ø–∞—Ç–µ–ª—å]({offer['buyer_url']})\n"
            f"üåï –ö—É–ø–∏—Ç—å USDT: {offer['price_sell']:.2f} ‚ÇΩ     üåë –ü—Ä–æ–¥–∞—Ç—å USDT: {offer['price_buy']:.2f} ‚ÇΩ\n"
            f"üåó –°–ø—Ä–µ–¥: üü¢ +{offer['spread']:.2f}% (–ø—Ä–æ—Ñ–∏—Ç ~{int(offer['profit_rub']):,} ‚ÇΩ)\n\n"
        )

    await bot.send_message(user_id, msg, parse_mode="Markdown")
